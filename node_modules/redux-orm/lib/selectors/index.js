"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFieldSelectorSpec = createFieldSelectorSpec;
exports.createModelSelectorSpec = createModelSelectorSpec;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _ForeignKey = _interopRequireDefault(require("../fields/ForeignKey"));

var _ManyToMany = _interopRequireDefault(require("../fields/ManyToMany"));

var _RelationalField = _interopRequireDefault(require("../fields/RelationalField"));

var _FieldSelectorSpec = _interopRequireDefault(require("./FieldSelectorSpec"));

var _ModelSelectorSpec = _interopRequireDefault(require("./ModelSelectorSpec"));

/**
 * @module selectors
 * @private
 */
function createFieldSelectorSpec(_ref) {
  var parent = _ref.parent,
      model = _ref.model,
      field = _ref.field,
      fieldModel = _ref.fieldModel,
      accessorName = _ref.accessorName,
      orm = _ref.orm,
      isVirtual = _ref.isVirtual;
  var fieldSelectorSpec = new _FieldSelectorSpec["default"]({
    parent: parent,
    model: model,
    field: field,
    fieldModel: fieldModel,
    accessorName: accessorName,
    orm: orm,
    isVirtual: isVirtual
  });
  /* Do not even try to create field selectors below attributes. */

  if (!(field instanceof _RelationalField["default"])) {
    // "orm.Author.name.publisher" would be nonsense
    return fieldSelectorSpec;
  }
  /* Prevent field selectors below collections. */


  if (parent instanceof _FieldSelectorSpec["default"]) {
    /* eslint-disable no-underscore-dangle */
    if ( // "orm.Author.books.publisher" would be nonsense
    parent._field instanceof _ForeignKey["default"] && parent._isVirtual || // "orm.Genre.books.publisher" would be nonsense
    parent._field instanceof _ManyToMany["default"]) {
      throw new Error("Cannot create a selector for `".concat(parent._accessorName, ".").concat(accessorName, "` because `").concat(parent._accessorName, "` is a collection field."));
    }
  }

  var toModelName = field.toModelName;
  var toModel = orm.get(toModelName === "this" ? model.modelName : toModelName);
  Object.entries(toModel.fields).forEach(function (_ref2) {
    var _ref3 = (0, _slicedToArray2["default"])(_ref2, 2),
        relatedFieldName = _ref3[0],
        relatedField = _ref3[1];

    var fieldAccessorName = relatedField.as || relatedFieldName;
    Object.defineProperty(fieldSelectorSpec, fieldAccessorName, {
      get: function get() {
        return createFieldSelectorSpec({
          parent: fieldSelectorSpec,
          model: model,
          fieldModel: toModel,
          field: relatedField,
          accessorName: fieldAccessorName,
          orm: orm,
          isVirtual: false
        });
      }
    });
  });
  Object.entries(toModel.virtualFields).forEach(function (_ref4) {
    var _ref5 = (0, _slicedToArray2["default"])(_ref4, 2),
        relatedFieldName = _ref5[0],
        relatedField = _ref5[1];

    var fieldAccessorName = relatedField.as || relatedFieldName;

    if (fieldSelectorSpec.hasOwnProperty(fieldAccessorName)) {
      return;
    }

    Object.defineProperty(fieldSelectorSpec, fieldAccessorName, {
      get: function get() {
        return createFieldSelectorSpec({
          parent: fieldSelectorSpec,
          model: model,
          fieldModel: toModel,
          field: relatedField,
          accessorName: fieldAccessorName,
          orm: orm,
          isVirtual: true
        });
      }
    });
  });
  return fieldSelectorSpec;
}

function createModelSelectorSpec(_ref6) {
  var model = _ref6.model,
      orm = _ref6.orm;
  var modelSelectorSpec = new _ModelSelectorSpec["default"]({
    parent: null,
    orm: orm,
    model: model
  });
  Object.entries(model.fields).forEach(function (_ref7) {
    var _ref8 = (0, _slicedToArray2["default"])(_ref7, 2),
        fieldName = _ref8[0],
        field = _ref8[1];

    var fieldAccessorName = field.as || fieldName;
    Object.defineProperty(modelSelectorSpec, fieldAccessorName, {
      get: function get() {
        return createFieldSelectorSpec({
          parent: modelSelectorSpec,
          model: model,
          fieldModel: model,
          field: field,
          accessorName: fieldAccessorName,
          orm: orm,
          isVirtual: false
        });
      }
    });
  });
  Object.entries(model.virtualFields).forEach(function (_ref9) {
    var _ref10 = (0, _slicedToArray2["default"])(_ref9, 2),
        fieldName = _ref10[0],
        field = _ref10[1];

    var fieldAccessorName = field.as || fieldName;

    if (modelSelectorSpec.hasOwnProperty(fieldAccessorName)) {
      return;
    }

    Object.defineProperty(modelSelectorSpec, fieldAccessorName, {
      get: function get() {
        return createFieldSelectorSpec({
          parent: modelSelectorSpec,
          model: model,
          fieldModel: model,
          field: field,
          accessorName: fieldAccessorName,
          orm: orm,
          isVirtual: true
        });
      }
    });
  });
  return modelSelectorSpec;
}