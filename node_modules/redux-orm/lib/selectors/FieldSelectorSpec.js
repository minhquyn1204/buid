"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _MapSelectorSpec = _interopRequireDefault(require("./MapSelectorSpec"));

var _ModelSelectorSpec = _interopRequireDefault(require("./ModelSelectorSpec"));

var _ModelBasedSelectorSpec = _interopRequireDefault(require("./ModelBasedSelectorSpec"));

var _idArgSelector = _interopRequireDefault(require("./idArgSelector"));

var _QuerySet = _interopRequireDefault(require("../QuerySet"));

var _Model = _interopRequireDefault(require("../Model"));

var _ForeignKey = _interopRequireDefault(require("../fields/ForeignKey"));

var _ManyToMany = _interopRequireDefault(require("../fields/ManyToMany"));

var FieldSelectorSpec = /*#__PURE__*/function (_ModelBasedSelectorSp) {
  (0, _inheritsLoose2["default"])(FieldSelectorSpec, _ModelBasedSelectorSp);

  function FieldSelectorSpec(_ref) {
    var _this;

    var field = _ref.field,
        fieldModel = _ref.fieldModel,
        accessorName = _ref.accessorName,
        isVirtual = _ref.isVirtual,
        other = (0, _objectWithoutProperties2["default"])(_ref, ["field", "fieldModel", "accessorName", "isVirtual"]);
    _this = _ModelBasedSelectorSp.call(this, other) || this;
    _this._field = field;
    _this._fieldModel = fieldModel;
    _this._accessorName = accessorName;
    _this._isVirtual = isVirtual;
    return _this;
  }

  var _proto = FieldSelectorSpec.prototype;

  _proto.valueForInstance = function valueForInstance(instance, session) {
    if (!instance) {
      return null;
    }

    var value;

    if (this._parent instanceof _ModelSelectorSpec["default"]) {
      /* orm.Model.field */
      value = instance[this._accessorName];
    } else {
      /* orm.Model.field1.field2..fieldN.field */
      var ParentToModel = session[this._parent.toModelName];

      var parentRef = this._parent.valueForInstance(instance, session);

      var parentInstance = parentRef ? new ParentToModel(parentRef) : null;
      value = parentInstance ? parentInstance[this._accessorName] : null;
    }

    if (value instanceof _Model["default"]) {
      return value.ref;
    }

    if (value instanceof _QuerySet["default"]) {
      return value.toRefArray();
    }

    return value;
  };

  _proto.map = function map(selector) {
    if (selector instanceof _ModelSelectorSpec["default"]) {
      if (this.toModelName === selector.model.modelName) {
        throw new Error("Cannot select models in a `map()` call. If you just want the `".concat(this._accessorName, "` as a ref array then you can simply drop the `map()`. Otherwise make sure you're passing a field selector of the form `").concat(this.toModelName, ".<field>` or a custom selector instead."));
      } else {
        throw new Error("Cannot select `".concat(selector.model.modelName, "` models in this `map()` call. Make sure you're passing a field selector of the form `").concat(this.toModelName, ".<field>` or a custom selector instead."));
      }
    } else if (selector instanceof FieldSelectorSpec || selector instanceof _MapSelectorSpec["default"]) {
      if (this.toModelName !== selector.model.modelName) {
        throw new Error("Cannot select fields of the `".concat(selector.model.modelName, "` model in this `map()` call. Make sure you're passing a field selector of the form `").concat(this.toModelName, ".<field>` or a custom selector instead."));
      }
    } else if (!selector || typeof selector !== "function" || !selector.recomputations) {
      throw new Error("`map()` requires a selector as an input. Received: ".concat(JSON.stringify(selector), " of type ").concat((0, _typeof2["default"])(selector)));
    }

    if (!(this._field instanceof _ForeignKey["default"]) && !(this._field instanceof _ManyToMany["default"])) {
      throw new Error("Cannot map selectors for non-collection fields");
    }

    return new _MapSelectorSpec["default"]({
      parent: this,
      model: this._model,
      orm: this._orm,
      field: this._field,
      selector: selector
    });
  };

  (0, _createClass2["default"])(FieldSelectorSpec, [{
    key: "key",
    get: function get() {
      return this._accessorName;
    }
  }, {
    key: "dependencies",
    get: function get() {
      return [this._orm, _idArgSelector["default"]];
    }
  }, {
    key: "toModelName",
    get: function get() {
      return this._field.toModelName === "this" ? this._fieldModel.modelName : this._field.toModelName;
    }
  }, {
    key: "toModel",
    get: function get() {
      var db = this._orm.getDatabase();

      return db.describe(this.toModelName);
    }
  }]);
  return FieldSelectorSpec;
}(_ModelBasedSelectorSpec["default"]);

exports["default"] = FieldSelectorSpec;