"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DeprecatedSchema = DeprecatedSchema;
exports["default"] = exports.ORM = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _Session = _interopRequireDefault(require("./Session"));

var _Model2 = _interopRequireDefault(require("./Model"));

var _db = require("./db");

var _fields = require("./fields");

var _Field = _interopRequireDefault(require("./fields/Field"));

var _ForeignKey2 = _interopRequireDefault(require("./fields/ForeignKey"));

var _ManyToMany = _interopRequireDefault(require("./fields/ManyToMany"));

var _selectors = require("./selectors");

var _utils = require("./utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var ORM_DEFAULTS = {
  createDatabase: _db.createDatabase
};
var RESERVED_TABLE_OPTIONS = ["indexes", "meta"];

var isReservedTableOption = function isReservedTableOption(word) {
  return RESERVED_TABLE_OPTIONS.includes(word);
};
/**
 * ORM - the Object Relational Mapper.
 *
 * Use instances of this class to:
 *
 * - Register your {@link Model} classes using {@link ORM#register}
 * - Get the empty state for the underlying database with {@link ORM#getEmptyState}
 * - Start an immutable database session with {@link ORM#session}
 * - Start a mutating database session with {@link ORM#mutableSession}
 *
 * Internally, this class handles generating a schema specification from models
 * to the database.
 */


var ORM = /*#__PURE__*/function () {
  /**
   * Creates a new ORM instance.
   *
   * @param {Object} [opts]
   * @param {Function} [opts.stateSelector] - function that given a Redux state tree
   *                                          will return the ORM state's subtree,
   *                                          e.g. `state => state.orm`
   *                                          (necessary if you want to use selectors)
   * @param {Function} [opts.createDatabase] - function that creates a database
   */
  function ORM(opts) {
    var _ORM_DEFAULTS = _objectSpread(_objectSpread({}, ORM_DEFAULTS), opts || {}),
        createDatabase = _ORM_DEFAULTS.createDatabase;

    this.createDatabase = createDatabase;
    this.registry = [];
    this.implicitThroughModels = [];
    this.installedFields = {};
    this.stateSelector = opts ? opts.stateSelector : null;
  }
  /**
   * Registers a {@link Model} class to the ORM.
   *
   * If the model has declared any ManyToMany fields, their
   * through models will be generated and registered with
   * this call, unless a custom through model has been specified.
   *
   * @param  {...Model} models - a {@link Model} class to register
   * @return {undefined}
   */


  var _proto = ORM.prototype;

  _proto.register = function register() {
    var _this = this;

    for (var _len = arguments.length, models = new Array(_len), _key = 0; _key < _len; _key++) {
      models[_key] = arguments[_key];
    }

    models.forEach(function (model) {
      if (model.modelName === undefined) {
        throw new Error("A model was passed that doesn't have a modelName set");
      }

      model.invalidateClassCache();

      _this.registerManyToManyModelsFor(model);

      _this.registry.push(model);

      Object.defineProperty(_this, model.modelName, {
        get: function get() {
          // make sure virtualFields are set up
          _this._setupModelPrototypes(_this.registry);

          return (0, _selectors.createModelSelectorSpec)({
            model: model,
            orm: _this
          });
        }
      });
    });
  };

  _proto.registerManyToManyModelsFor = function registerManyToManyModelsFor(model) {
    var _this2 = this;

    var fields = model.fields;
    var thisModelName = model.modelName;
    Object.entries(fields).forEach(function (_ref) {
      var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
          fieldName = _ref2[0],
          fieldInstance = _ref2[1];

      if (!(fieldInstance instanceof _ManyToMany["default"])) {
        return;
      }

      var toModelName;

      if (fieldInstance.toModelName === "this") {
        toModelName = thisModelName;
      } else {
        toModelName = fieldInstance.toModelName; // eslint-disable-line prefer-destructuring
      }

      var selfReferencing = thisModelName === toModelName;
      var fromFieldName = (0, _utils.m2mFromFieldName)(thisModelName);
      var toFieldName = (0, _utils.m2mToFieldName)(toModelName);

      if (fieldInstance.through) {
        if (selfReferencing && !fieldInstance.throughFields) {
          throw new Error("Self-referencing many-to-many relationship at " + "\"".concat(thisModelName, ".").concat(fieldName, "\" using custom ") + "model \"".concat(fieldInstance.through, "\" has no ") + "throughFields key. Cannot determine which " + "fields reference the instances partaking " + "in the relationship.");
        }
      } else {
        var _Through$fields;

        var Through = /*#__PURE__*/function (_Model) {
          (0, _inheritsLoose2["default"])(ThroughModel, _Model);

          function ThroughModel() {
            return _Model.apply(this, arguments) || this;
          }

          return ThroughModel;
        }(_Model2["default"]);

        Through.modelName = (0, _utils.m2mName)(thisModelName, fieldName);

        var PlainForeignKey = /*#__PURE__*/function (_ForeignKey) {
          (0, _inheritsLoose2["default"])(PlainForeignKey, _ForeignKey);

          function PlainForeignKey() {
            return _ForeignKey.apply(this, arguments) || this;
          }

          (0, _createClass2["default"])(PlainForeignKey, [{
            key: "installsBackwardsVirtualField",
            get: function get() {
              return false;
            }
          }, {
            key: "installsBackwardsDescriptor",
            get: function get() {
              return false;
            }
          }]);
          return PlainForeignKey;
        }(_ForeignKey2["default"]);

        var ForeignKeyClass = selfReferencing ? PlainForeignKey : _ForeignKey2["default"];
        Through.fields = (_Through$fields = {
          id: (0, _fields.attr)()
        }, (0, _defineProperty2["default"])(_Through$fields, fromFieldName, new ForeignKeyClass(thisModelName)), (0, _defineProperty2["default"])(_Through$fields, toFieldName, new ForeignKeyClass(toModelName)), _Through$fields);
        Through.invalidateClassCache();

        _this2.implicitThroughModels.push(Through);
      }
    });
  }
  /**
   * Gets a {@link Model} class by its name from the registry.
   * @param  {string} modelName - the name of the {@link Model} class to get
   * @throws If {@link Model} class is not found.
   * @return {Model} the {@link Model} class, if found
   */
  ;

  _proto.get = function get(modelName) {
    var allModels = this.registry.concat(this.implicitThroughModels);
    var found = Object.values(allModels).find(function (model) {
      return model.modelName === modelName;
    });

    if (typeof found === "undefined") {
      throw new Error("Did not find model ".concat(modelName, " from registry."));
    }

    return found;
  };

  _proto.getModelClasses = function getModelClasses() {
    this._setupModelPrototypes(this.registry);

    this._setupModelPrototypes(this.implicitThroughModels);

    return this.registry.concat(this.implicitThroughModels);
  };

  _proto.generateSchemaSpec = function generateSchemaSpec() {
    var models = this.getModelClasses();
    var tables = models.reduce(function (spec, modelClass) {
      var tableName = modelClass.modelName;
      var tableSpec = modelClass.tableOptions();
      Object.keys(tableSpec).filter(isReservedTableOption).forEach(function (key) {
        throw new Error("Reserved keyword `".concat(key, "` used in ").concat(tableName, ".options."));
      });
      spec[tableName] = _objectSpread({
        fields: _objectSpread({}, modelClass.fields)
      }, tableSpec);
      return spec;
    }, {});
    return {
      tables: tables
    };
  };

  _proto.getDatabase = function getDatabase() {
    if (!this.db) {
      this.db = this.createDatabase(this.generateSchemaSpec());
    }

    return this.db;
  }
  /**
   * Returns the empty database state.
   * @return {Object} the empty state
   */
  ;

  _proto.getEmptyState = function getEmptyState() {
    return this.getDatabase().getEmptyState();
  }
  /**
   * Begins an immutable database session.
   *
   * @param  {Object} state  - the state the database manages
   * @return {Session} a new {@link Session} instance
   */
  ;

  _proto.session = function session(state) {
    return new _Session["default"](this, this.getDatabase(), state);
  }
  /**
   * Begins a mutable database session.
   *
   * @param  {Object} state  - the state the database manages
   * @return {Session} a new {@link Session} instance
   */
  ;

  _proto.mutableSession = function mutableSession(state) {
    return new _Session["default"](this, this.getDatabase(), state, true);
  }
  /**
   * @private
   */
  ;

  _proto._setupModelPrototypes = function _setupModelPrototypes(models) {
    var _this3 = this;

    models.filter(function (model) {
      return !model.isSetUp;
    }).forEach(function (model) {
      var fields = model.fields,
          modelName = model.modelName,
          querySetClass = model.querySetClass;
      Object.entries(fields).forEach(function (_ref3) {
        var _ref4 = (0, _slicedToArray2["default"])(_ref3, 2),
            fieldName = _ref4[0],
            field = _ref4[1];

        if (!(field instanceof _Field["default"])) {
          throw new Error("".concat(modelName, ".").concat(fieldName, " is of type \"").concat((0, _typeof2["default"])(field), "\" ") + "but must be an instance of Field. Please use the " + "`attr`, `fk`, `oneToOne` and `many` " + "functions to define fields.");
        }

        if (!_this3._isFieldInstalled(modelName, fieldName)) {
          _this3._installField(field, fieldName, model);

          _this3._setFieldInstalled(modelName, fieldName);
        }
      });
      (0, _utils.attachQuerySetMethods)(model, querySetClass);
      model.isSetUp = true;
    });
  }
  /**
   * @private
   */
  ;

  _proto._isFieldInstalled = function _isFieldInstalled(modelName, fieldName) {
    return this.installedFields.hasOwnProperty(modelName) ? !!this.installedFields[modelName][fieldName] : false;
  }
  /**
   * @private
   */
  ;

  _proto._setFieldInstalled = function _setFieldInstalled(modelName, fieldName) {
    if (!this.installedFields.hasOwnProperty(modelName)) {
      this.installedFields[modelName] = {};
    }

    this.installedFields[modelName][fieldName] = true;
  }
  /**
   * Installs a field on a model and its related models if necessary.
   * @private
   */
  ;

  _proto._installField = function _installField(field, fieldName, model) {
    var FieldInstaller = field.installerClass;
    new FieldInstaller({
      field: field,
      fieldName: fieldName,
      model: model,
      orm: this
    }).run();
  } // DEPRECATED AND REMOVED METHODS

  /**
   * @deprecated Use {@link ORM#mutableSession} instead.
   */
  ;

  _proto.withMutations = function withMutations(state) {
    (0, _utils.warnDeprecated)("`ORM.prototype.withMutations` has been deprecated. " + "Use `ORM.prototype.mutableSession` instead.");
    return this.mutableSession(state);
  }
  /**
   * @deprecated Use {@link ORM#session} instead.
   */
  ;

  _proto.from = function from(state) {
    (0, _utils.warnDeprecated)("`ORM.prototype.from` has been deprecated. " + "Use `ORM.prototype.session` instead.");
    return this.session(state);
  }
  /**
   * @deprecated Use {@link ORM#getEmptyState} instead.
   */
  ;

  _proto.getDefaultState = function getDefaultState() {
    (0, _utils.warnDeprecated)("`ORM.prototype.getDefaultState` has been deprecated. Use " + "`ORM.prototype.getEmptyState` instead.");
    return this.getEmptyState();
  }
  /**
   * @deprecated Define a Model class instead.
   */
  ;

  _proto.define = function define() {
    throw new Error("`ORM.prototype.define` has been removed. Please define a Model class.");
  };

  return ORM;
}();

exports.ORM = ORM;

function DeprecatedSchema() {
  throw new Error("Schema has been renamed to ORM. Please import ORM instead of Schema " + "from Redux-ORM.");
}

var _default = ORM;
exports["default"] = _default;