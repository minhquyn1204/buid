"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.FieldInstallerTemplate = void 0;

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

/**
 * Defines algorithm for installing a field onto a model and related models.
 * Conforms to the template method behavioral design pattern.
 * @private
 * @memberof module:fields
 */
var FieldInstallerTemplate = /*#__PURE__*/function () {
  function FieldInstallerTemplate(opts) {
    this.field = opts.field;
    this.fieldName = opts.fieldName;
    this.model = opts.model;
    this.orm = opts.orm;
    /**
     * the field itself has no knowledge of the model
     * it is being installed upon; we need to inform it
     * that it is a self-referencing field for the field
     * to be able to make better informed decisions
     */

    if (this.field.references(this.model)) {
      this.field.toModelName = "this";
    }
  }

  var _proto = FieldInstallerTemplate.prototype;

  _proto.run = function run() {
    this.installForwardsDescriptor();

    if (this.field.installsForwardsVirtualField) {
      this.installForwardsVirtualField();
    }
    /**
     * Install a backwards field on a model as a consequence
     * of having installed the forwards field on another model.
     */


    if (this.field.installsBackwardsDescriptor) {
      this.installBackwardsDescriptor();
    }

    if (this.field.installsBackwardsVirtualField) {
      this.installBackwardsVirtualField();
    }
  };

  (0, _createClass2["default"])(FieldInstallerTemplate, [{
    key: "toModel",
    get: function get() {
      if (typeof this._toModel === "undefined") {
        var toModelName = this.field.toModelName;

        if (!toModelName) {
          this._toModel = null;
        } else if (toModelName === "this") {
          this._toModel = this.model;
        } else {
          this._toModel = this.orm.get(toModelName);
        }
      }

      return this._toModel;
    }
  }, {
    key: "throughModel",
    get: function get() {
      if (typeof this._throughModel === "undefined") {
        var throughModelName = this.field.getThroughModelName(this.fieldName, this.model);

        if (!throughModelName) {
          this._throughModel = null;
        } else {
          this._throughModel = this.orm.get(throughModelName);
        }
      }

      return this._throughModel;
    }
  }, {
    key: "backwardsFieldName",
    get: function get() {
      return this.field.getBackwardsFieldName(this.model);
    }
  }]);
  return FieldInstallerTemplate;
}();

exports.FieldInstallerTemplate = FieldInstallerTemplate;
var _default = FieldInstallerTemplate;
exports["default"] = _default;