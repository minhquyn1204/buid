"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.DefaultFieldInstaller = void 0;

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _FieldInstallerTemplate = _interopRequireDefault(require("./FieldInstallerTemplate"));

var _utils = require("../utils");

/**
 * Default implementation for the template method in FieldInstallerTemplate.
 * @private
 * @memberof module:fields
 */
var DefaultFieldInstaller = /*#__PURE__*/function (_FieldInstallerTempla) {
  (0, _inheritsLoose2["default"])(DefaultFieldInstaller, _FieldInstallerTempla);

  function DefaultFieldInstaller() {
    return _FieldInstallerTempla.apply(this, arguments) || this;
  }

  var _proto = DefaultFieldInstaller.prototype;

  _proto.installForwardsDescriptor = function installForwardsDescriptor() {
    Object.defineProperty(this.model.prototype, this.fieldName, this.field.createForwardsDescriptor(this.fieldName, this.model, this.toModel, this.throughModel));
  };

  _proto.installForwardsVirtualField = function installForwardsVirtualField() {
    this.model.virtualFields[this.fieldName] = this.field.createForwardsVirtualField(this.fieldName, this.model, this.toModel, this.throughModel);
  };

  _proto.installBackwardsDescriptor = function installBackwardsDescriptor() {
    var backwardsDescriptor = Object.getOwnPropertyDescriptor(this.toModel.prototype, this.backwardsFieldName);

    if (backwardsDescriptor) {
      throw new Error((0, _utils.reverseFieldErrorMessage)(this.model.modelName, this.fieldName, this.toModel.modelName, this.backwardsFieldName));
    } // install backwards descriptor


    Object.defineProperty(this.toModel.prototype, this.backwardsFieldName, this.field.createBackwardsDescriptor(this.fieldName, this.model, this.toModel, this.throughModel));
  };

  _proto.installBackwardsVirtualField = function installBackwardsVirtualField() {
    this.toModel.virtualFields[this.backwardsFieldName] = this.field.createBackwardsVirtualField(this.fieldName, this.model, this.toModel, this.throughModel);
  };

  return DefaultFieldInstaller;
}(_FieldInstallerTemplate["default"]);

exports.DefaultFieldInstaller = DefaultFieldInstaller;
var _default = DefaultFieldInstaller;
exports["default"] = _default;