"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.ManyToMany = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _RelationalField2 = _interopRequireDefault(require("./RelationalField"));

var _descriptors = require("../descriptors");

var _utils = require("../utils");

/**
 * @memberof module:fields
 */
var ManyToMany = /*#__PURE__*/function (_RelationalField) {
  (0, _inheritsLoose2["default"])(ManyToMany, _RelationalField);

  function ManyToMany() {
    return _RelationalField.apply(this, arguments) || this;
  }

  var _proto = ManyToMany.prototype;

  _proto.getDefault = function getDefault() {
    return [];
  };

  _proto.getThroughModelName = function getThroughModelName(fieldName, model) {
    return this.through || (0, _utils.m2mName)(model.modelName, fieldName);
  };

  _proto.createForwardsDescriptor = function createForwardsDescriptor(fieldName, model, toModel, throughModel) {
    return (0, _descriptors.manyToManyDescriptor)(model.modelName, toModel.modelName, throughModel.modelName, this.getThroughFields(fieldName, model, toModel, throughModel), false);
  };

  _proto.createBackwardsDescriptor = function createBackwardsDescriptor(fieldName, model, toModel, throughModel) {
    return (0, _descriptors.manyToManyDescriptor)(model.modelName, toModel.modelName, throughModel.modelName, this.getThroughFields(fieldName, model, toModel, throughModel), true);
  };

  _proto.createBackwardsVirtualField = function createBackwardsVirtualField(fieldName, model, toModel, throughModel) {
    var ThisField = this.getClass();
    return new ThisField({
      to: model.modelName,
      relatedName: fieldName,
      through: throughModel.modelName,
      throughFields: this.getThroughFields(fieldName, model, toModel, throughModel)
    });
  };

  _proto.createForwardsVirtualField = function createForwardsVirtualField(fieldName, model, toModel, throughModel) {
    var ThisField = this.getClass();
    return new ThisField({
      to: toModel.modelName,
      relatedName: fieldName,
      through: this.through,
      throughFields: this.getThroughFields(fieldName, model, toModel, throughModel),
      as: this.as
    });
  };

  _proto.getThroughFields = function getThroughFields(fieldName, model, toModel, throughModel) {
    if (this.throughFields) {
      var _this$throughFields = (0, _slicedToArray2["default"])(this.throughFields, 2),
          fieldAName = _this$throughFields[0],
          fieldBName = _this$throughFields[1];

      var fieldA = throughModel.fields[fieldAName];
      return {
        to: fieldA.references(toModel) ? fieldAName : fieldBName,
        from: fieldA.references(toModel) ? fieldBName : fieldAName
      };
    }

    if (model.modelName === toModel.modelName) {
      /**
       * we have no way of determining the relationship's
       * direction here, so we need to assume that the user
       * did not use a custom through model
       * see ORM#registerManyToManyModelsFor
       */
      return {
        to: (0, _utils.m2mToFieldName)(toModel.modelName),
        from: (0, _utils.m2mFromFieldName)(model.modelName)
      };
    }
    /**
     * determine which field references which model
     * and infer the directions from that
     */


    var throughModelFieldReferencing = function throughModelFieldReferencing(otherModel) {
      return Object.keys(throughModel.fields).find(function (someFieldName) {
        return throughModel.fields[someFieldName].references(otherModel);
      });
    };

    return {
      to: throughModelFieldReferencing(toModel),
      from: throughModelFieldReferencing(model)
    };
  };

  (0, _createClass2["default"])(ManyToMany, [{
    key: "installsForwardsVirtualField",
    get: function get() {
      return true;
    }
  }]);
  return ManyToMany;
}(_RelationalField2["default"]);

exports.ManyToMany = ManyToMany;
var _default = ManyToMany;
exports["default"] = _default;