import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _createClass from "@babel/runtime/helpers/createClass";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import ModelBasedSelectorSpec from "./ModelBasedSelectorSpec";
import idArgSelector from "./idArgSelector";

var MapSelectorSpec = /*#__PURE__*/function (_ModelBasedSelectorSp) {
  _inheritsLoose(MapSelectorSpec, _ModelBasedSelectorSp);

  function MapSelectorSpec(_ref) {
    var _this;

    var field = _ref.field,
        selector = _ref.selector,
        other = _objectWithoutProperties(_ref, ["field", "selector"]);

    _this = _ModelBasedSelectorSp.call(this, other) || this;
    _this._field = field;
    _this._selector = selector;
    return _this;
  }

  var _proto = MapSelectorSpec.prototype;

  _proto.createResultFunc = function createResultFunc(parentSelector) {
    var _this2 = this;

    var idAttribute = this._parent.toModel.idAttribute;
    return function (state) {
      for (var _len = arguments.length, other = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        other[_key - 1] = arguments[_key];
      }

      /**
       * The parent selector should return a ref array
       * in case of a single ID being passed.
       * Otherwise it should return an array of ref arrays.
       */
      var parentResult = parentSelector.apply(void 0, [state].concat(other));
      var idArg = idArgSelector.apply(void 0, [state].concat(other));

      var single = function single(refArray) {
        if (refArray === null) {
          // an intermediate field could not be resolved
          return null;
        }

        return refArray.map(function (ref) {
          return _this2._selector(state, ref[idAttribute]);
        });
      };

      if (typeof idArg === "undefined" || Array.isArray(idArg)) {
        return parentResult.map(single);
      }

      return single(parentResult);
    };
  };

  _createClass(MapSelectorSpec, [{
    key: "selector",
    get: function get() {
      return this._selector;
    },
    set: function set(selector) {
      this._selector = selector;
    }
  }, {
    key: "key",
    get: function get() {
      return this._selector;
    }
  }]);

  return MapSelectorSpec;
}(ModelBasedSelectorSpec);

export { MapSelectorSpec as default };