import _typeof from "@babel/runtime/helpers/typeof";
import _createClass from "@babel/runtime/helpers/createClass";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";

/* eslint-disable max-classes-per-file */
import Field from "./Field";
import DefaultFieldInstaller from "./DefaultFieldInstaller";
import { reverseFieldName, normalizeModelReference } from "../utils";
/**
 * @private
 * @memberof module:fields
 */

export var RelationalField = /*#__PURE__*/function (_Field) {
  _inheritsLoose(RelationalField, _Field);

  function RelationalField() {
    var _this;

    _this = _Field.call(this) || this;

    if (arguments.length === 1 && _typeof(arguments.length <= 0 ? undefined : arguments[0]) === "object") {
      var opts = arguments.length <= 0 ? undefined : arguments[0];
      _this.toModelName = normalizeModelReference(opts.to);
      _this.relatedName = opts.relatedName;
      _this.through = normalizeModelReference(opts.through);
      _this.throughFields = opts.throughFields;
      _this.as = opts.as;
    } else {
      var _ref = [normalizeModelReference(arguments.length <= 0 ? undefined : arguments[0]), arguments.length <= 1 ? undefined : arguments[1]];
      _this.toModelName = _ref[0];
      _this.relatedName = _ref[1];
    }

    return _this;
  }

  var _proto = RelationalField.prototype;

  _proto.getBackwardsFieldName = function getBackwardsFieldName(model) {
    return this.relatedName || reverseFieldName(model.modelName);
  };

  _proto.createBackwardsVirtualField = function createBackwardsVirtualField(fieldName, model, toModel, throughModel) {
    var ThisField = this.getClass();
    return new ThisField(model.modelName, fieldName);
  };

  _proto.references = function references(model) {
    return this.toModelName === model.modelName;
  };

  _createClass(RelationalField, [{
    key: "installsBackwardsVirtualField",
    get: function get() {
      return true;
    }
  }, {
    key: "installsBackwardsDescriptor",
    get: function get() {
      return true;
    }
  }, {
    key: "installerClass",
    get: function get() {
      return /*#__PURE__*/function (_DefaultFieldInstalle) {
        _inheritsLoose(AliasedForwardsDescriptorInstaller, _DefaultFieldInstalle);

        function AliasedForwardsDescriptorInstaller() {
          return _DefaultFieldInstalle.apply(this, arguments) || this;
        }

        var _proto2 = AliasedForwardsDescriptorInstaller.prototype;

        _proto2.installForwardsDescriptor = function installForwardsDescriptor() {
          Object.defineProperty(this.model.prototype, this.field.as || this.fieldName, // use supplied name if possible
          this.field.createForwardsDescriptor(this.fieldName, this.model, this.toModel, this.throughModel));
        };

        return AliasedForwardsDescriptorInstaller;
      }(DefaultFieldInstaller);
    }
  }]);

  return RelationalField;
}(Field);
export default RelationalField;