import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import ops from "immutable-ops";
import { CREATE, UPDATE, DELETE, SUCCESS, STATE_FLAG } from "../constants";
import Table from "./Table";
var BASE_EMPTY_STATE = {};
Object.defineProperty(BASE_EMPTY_STATE, STATE_FLAG, {
  enumerable: true,
  value: true
});
/** @private */

function replaceTableState(tableName, newTableState, tx, state) {
  var batchToken = tx.batchToken,
      withMutations = tx.withMutations;

  if (withMutations) {
    state[tableName] = newTableState;
    return state;
  }

  return ops.batch.set(batchToken, tableName, newTableState, state);
}
/** @private */


function query(tables, querySpec, state) {
  var tableName = querySpec.table,
      clauses = querySpec.clauses;
  var table = tables[tableName];
  var rows = table.query(state[tableName], clauses);
  return {
    rows: rows
  };
}
/** @private */


function update(tables, updateSpec, tx, state) {
  var action = updateSpec.action,
      payload = updateSpec.payload;
  var tableName;
  var nextTableState;
  var resultPayload;

  if (action === CREATE) {
    tableName = updateSpec.table;
    var table = tables[tableName];
    var currTableState = state[tableName];
    var result = table.insert(tx, currTableState, payload);
    nextTableState = result.state;
    resultPayload = result.created;
  } else {
    var querySpec = updateSpec.query;
    tableName = querySpec.table;

    var _query = query(tables, querySpec, state),
        rows = _query.rows;

    var _table = tables[tableName];
    var _currTableState = state[tableName];

    if (action === UPDATE) {
      nextTableState = _table.update(tx, _currTableState, rows, payload); // return updated rows

      resultPayload = query(tables, querySpec, state).rows;
    } else if (action === DELETE) {
      nextTableState = _table["delete"](tx, _currTableState, rows); // return original rows that we just deleted

      resultPayload = rows;
    } else {
      throw new Error("Database received unknown update type: ".concat(action));
    }
  }

  var nextDBState = replaceTableState(tableName, nextTableState, tx, state);
  return {
    status: SUCCESS,
    state: nextDBState,
    payload: resultPayload
  };
}
/**
 * @memberof db
 * @param {Object} schemaSpec
 * @return Object database
 */


export function createDatabase(schemaSpec) {
  var tableSpecs = schemaSpec.tables;
  var tables = Object.entries(tableSpecs).reduce(function (map, _ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        tableName = _ref2[0],
        tableSpec = _ref2[1];

    return _objectSpread(_objectSpread({}, map), {}, _defineProperty({}, tableName, new Table(tableSpec)));
  }, {});

  var getEmptyState = function getEmptyState() {
    return Object.entries(tables).reduce(function (map, _ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
          tableName = _ref4[0],
          table = _ref4[1];

      return _objectSpread(_objectSpread({}, map), {}, _defineProperty({}, tableName, table.getEmptyState()));
    }, BASE_EMPTY_STATE);
  };

  return {
    getEmptyState: getEmptyState,
    query: query.bind(null, tables),
    update: update.bind(null, tables),
    // Used to inspect the schema.
    describe: function describe(tableName) {
      return tables[tableName];
    }
  };
}
export default createDatabase;